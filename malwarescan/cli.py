# malwarescan/cli.py
# -*- coding: utf-8 -*-
from __future__ import absolute_import

from operator import attrgetter

import click
from flask import current_app
from flask_appfactory.cli import clifactory
from flask_cli import with_appcontext


from .app import create_app

cli = clifactory(create_app)


@cli.command('routes', short_help='Show the routes registered with app\'s current config.')
@click.option(
    '--sort', '-s',
    type=click.Choice(('endpoint', 'methods', 'rule', 'match')),
    default='endpoint',
    help=(
        'Method to sort routes by. "match" is the order that Flask will match '
        'routes when dispatching a request.'
    )
)
@click.option(
    '--all-methods',
    is_flag=True,
    help="Show HEAD and OPTIONS methods."
)
@with_appcontext
def routes_command(sort, all_methods):
    """Show all registered routes with endpoints and methods."""

    rules = list(current_app.url_map.iter_rules())
    if not rules:
        click.echo('No routes were registered.')
        return

    ignored_methods = set(() if all_methods else ('HEAD', 'OPTIONS'))

    if sort in ('endpoint', 'rule'):
        rules = sorted(rules, key=attrgetter(sort))
    elif sort == 'methods':
        rules = sorted(rules, key=lambda rule: sorted(rule.methods))

    rule_methods = [
        ', '.join(sorted(rule.methods - ignored_methods)) for rule in rules
    ]

    headers = ('Endpoint', 'Methods', 'Rule')
    widths = (
        max(len(rule.endpoint) for rule in rules),
        max(len(methods) for methods in rule_methods),
        max(len(rule.rule) for rule in rules),
    )
    widths = [max(len(h), w) for h, w in zip(headers, widths)]
    row = '{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}'.format(*widths)

    click.echo(row.format(*headers).strip())
    click.echo(row.format(*('-' * width for width in widths)))

    for rule, methods in zip(rules, rule_methods):
        click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())
