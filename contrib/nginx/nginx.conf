server {
   listen 443 ssl;
   server_name _;
   root /var/www/html;

   ssl_session_cache  builtin:1000  shared:SSL:50m;
   ssl_protocols  TLSv1 TLSv1.1 TLSv1.2;
   #ssl_ciphers HIGH:!aNULL:!eNULL:!EXPORT:!CAMELLIA:!DES:!MD5:!PSK:!RC4:!TLS_RSA;
   ssl_ciphers HIGH:!aNULL:!eNULL:!EXPORT:!CAMELLIA:!DES:!MD5:!PSK:!RC4:!RSA:!DHE:!SRP;
   ssl_prefer_server_ciphers on;
 
   # letsencrypt certificate
   ssl_certificate /etc/nginx/certs/malwarescan.akat-t.com/fullchain1.pem;
   ssl_certificate_key /etc/nginx/certs/malwarescan.akat-t.com/privkey1.pem;
   # client certificate
   ssl_client_certificate /etc/nginx/certs/client-bundle.pem;
   ssl_verify_client optional;

   access_log /var/log/nginx/malwarescan.log;

   charset utf-8;
   client_max_body_size 256m;

   proxy_intercept_errors on;

   error_page 400 /400_json;
   error_page 401 /401_json;
   error_page 403 /403_json;
   error_page 413 /413_json;
   error_page 500 /500_json;

   location /400_json {
       default_type application/json;
       return 400 '{"status": 400, "detail": "The request could not be understood by the server due to malformed syntax."}';
   }
   location /401_json {
       default_type application/json;
       return 401 '{"status": 401, "detail": "Authentication is required and/or has failed."}';
   }
   location /403_json {
       default_type application/json;
       return 403 '{"status": 403, "detail": "The user is not permitted to perform this operation."}';
   }
   location /413_json {
       default_type application/json;
       return 413 '{"status": 413, "detail": "Payload Too Large."}';
   }
   location /500_json {
       default_type application/json;
       return 500 '{"status": 500, "detail": "An internal error has occurred."}';
   }

    location = /favicon.ico {
        alias /var/www/html/static/favicon.ico;
    }

    location /static/ {
        try_files $uri $uri/ =404;
    }

    location / {
      proxy_set_header        Host $host;
      proxy_set_header        X-Real-IP $remote_addr;
      proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header        X-Forwarded-Proto $scheme;
      proxy_set_header        X-Ssl-Cert $ssl_client_cert;
      proxy_set_header        X-Ssl-Verify $ssl_client_verify;
      proxy_read_timeout      90;
      proxy_pass              http://127.0.0.1:8080/;
    }
    location /eval {
      proxy_set_header        Host $host;
      proxy_set_header        X-Real-IP $remote_addr;
      proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header        X-Forwarded-Proto $scheme;
      proxy_set_header        X-Ssl-Cert $ssl_client_cert;
      proxy_set_header        X-Ssl-Verify $ssl_client_verify;
      proxy_read_timeout      90;
      proxy_pass              http://127.0.0.1:8080/v2/eval;
      proxy_redirect          http://127.0.0.1:9001/v2/eval /eval;
    }
}
